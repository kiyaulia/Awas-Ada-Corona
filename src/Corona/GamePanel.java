/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Corona;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import javafx.embed.swing.JFXPanel;
import javafx.scene.media.AudioClip;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.util.Duration;
import javax.imageio.ImageIO;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;


/**
 *
 * @author JakubDanielczyk
 */
public class GamePanel extends javax.swing.JPanel implements Efek{

    private Pemain pemain;
    private Road road;
    private Vitamin vitamin;
    private Timer virusSpawnTimer;
    private Timer virusSpeedIncreaseTimer;
    private ArrayList<Virus> virusList = new ArrayList<>();
    private int virusSpawnDelay = 3000;
    private int virusSpeed = 100;
    
    private Timer vitaminSpawnTimer, vitaminSpeedIncreaseTimer;
    private int vitaminSpawnDelay = 13000 ,vitaminSpeed = 100;
    private ArrayList<Vitamin> vitaminList = new ArrayList<>();
    
    
    private Random randomizer = new Random();
    static MediaPlayer player; //buat msuic game
    static AudioClip soundPlayer; //buat efek 
    private Timer explosionTimer;
    private int explostionTimerCounter = 0;
    private Timer collisionCheckTimer;
    private double score = 0;
    private int imun;
    private boolean intelligent = false;
    private BufferedImage virusImage;
    private BufferedImage pemainImage;
    private BufferedImage treeImage, vitaminImage;
    
    JLabel skor = new JLabel("Skor");
    
    
    
    public GamePanel() {
        initComponents();
        preparePanel();
        loadGame();
        prepareTimers();
        preparePlayers();
       
//        skor.setBounds(300, 50, 50, 100);
//        skor.setText("SKOR");
//        this.add(skor);
        
    }
    
    private void preparePanel() {
        try {
            virusImage = ImageIO.read(getClass().getResource("/resources/icon/virus.png"));
            pemainImage = ImageIO.read(getClass().getResource("/resources/icon/bulat.png"));
            vitaminImage = ImageIO.read(getClass().getResource("/resources/Vitamin resize.png"));
        } catch (IOException ex) {
            System.out.println(Arrays.toString(ex.getStackTrace()));
        }
        setFocusable(true);
        JFXPanel fxPanel = new JFXPanel();
        add(fxPanel);
        
        score = 0;
        imun = 100;
        
        virusSpawnTimer = null;
        virusSpeedIncreaseTimer = null;
        virusList = new ArrayList<>();
        virusSpawnDelay = 3000;
        virusSpeed = 100;
        explosionTimer = null;
        explostionTimerCounter = 0;
        collisionCheckTimer = null;
        intelligent = false;
        
        vitaminSpawnTimer = null;
        vitaminSpeedIncreaseTimer = null;
        vitaminList = new ArrayList<>();
        vitaminSpawnDelay = 13000;
        vitaminSpeed = 100;
        explosionTimer = null;
        explostionTimerCounter = 0;
        collisionCheckTimer = null;
        intelligent = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Nyawa_pemain = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        setLayout(null);

        Nyawa_pemain.setBackground(new java.awt.Color(0, 0, 0));
        Nyawa_pemain.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        Nyawa_pemain.setText("IMUN: 100%");
        Nyawa_pemain.setBorder(new javax.swing.border.MatteBorder(null));
        add(Nyawa_pemain);
        Nyawa_pemain.setBounds(162, 0, 90, 26);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icon Game/atas.png"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, -20, 440, 60);
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_SPACE:
                startGame();
                break;
            case KeyEvent.VK_LEFT:
                pemain.moveLeft();
                break;
            case KeyEvent.VK_RIGHT:
                pemain.moveRight();
                break;
            default:
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    
    private void loadGame() {
        pemain = new Pemain(pemainImage);
        road = new Road();
        add(pemain);
        add(road);
        road.prepareStripes();
        road.prepareTrees();
        revalidate();
        repaint();
    }
    
    private void restartGame() {
        removeAll();
        initComponents();
        preparePanel();
        loadGame();
        prepareTimers();
        prepareTimers();
    }
    
    private void prepareTimers() {
        virusSpawnTimer = new Timer(virusSpawnDelay, (e) -> {
            addNewVirus();
            removeRedundantVirus();
            revalidate();
            repaint();
        });
        virusSpawnTimer.setInitialDelay(3000);
        
        vitaminSpawnTimer = new Timer(vitaminSpawnDelay, (e) -> {
            addNewVitamin();
            removeRedundantVitamin();
            revalidate();
            repaint();
        });
        vitaminSpawnTimer.setInitialDelay(19000);
        
        virusSpeedIncreaseTimer = new Timer(7000, (e) -> {
            if (virusSpeed > 25) {
                virusSpeed -= 10;
            } else {
                virusSpeed = 10;
                intelligent = true;
            }
            road.setTimersSpeed(virusSpeed);
        });
        
        explosionTimer = new Timer(50, (e) -> {
                road.nextExplosion();
                explostionTimerCounter++;
                if (explostionTimerCounter > 12) {
                    explosionTimer.stop();
                }}
        
        );
        
        collisionCheckTimer = new Timer(virusSpeed, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (collisionOccuredVit()){
                    imun+= 5;
                    remove(vitaminList.get(0));
                    vitaminList.remove(0);
                    Nyawa_pemain.setText("IMUN : "+ imun +" %");
                }
                if (collisionOccured() && imun <= 0) {
                    road.explosionPosition = new Point(pemain.getX(), pemain.getY());
                    explosionTimer.start();
                    player.stop();
                    soundPlayer.play();
                    
                    stopAllTimers();
                    
                    showAlert();
                    restartGame();
                      
                }
            }
        });
    }
    
    private void preparePlayers() {
        URL backGr = getClass().getResource("/resources/music.wav");
        URL expSound = getClass().getResource("/resources/explosion.wav");
        player = new MediaPlayer(new Media(backGr.toString()));
        player.setOnEndOfMedia(new Runnable() {
            @Override
            public void run() {
                player.seek(Duration.ZERO);
            }
        });
        
        soundPlayer = new AudioClip(expSound.toString());
    }
    
    private void startGame() {
        road.startTimers();
        virusSpawnTimer.start();
        vitaminSpawnTimer.start();
        virusSpeedIncreaseTimer.start();      
        player.play();
        collisionCheckTimer.start();
    }
    
    private void addNewVirus() {
        Virus virus;
        if (intelligent) {
            virus = new Virus(getPemainCurrentRoadNumber(), virusSpeed, virusImage);
        } else {
            int roadNumber = randomizer.nextInt(3) + 1;
            virus = new Virus(roadNumber, virusSpeed, virusImage);
        }
        virusList.add(virus);
        remove(road);
        add(virus);
        add(road);
        virus.start();
    }
    
     private void addNewVitamin() {
        Vitamin vitamin;
        if (intelligent) {
            vitamin = new Vitamin(getPemainCurrentRoadNumber(), virusSpeed, vitaminImage);
        } else {
            int roadNumber = randomizer.nextInt(3) + 1;
            vitamin = new Vitamin(roadNumber, virusSpeed, vitaminImage);
        }
        vitaminList.add(vitamin);
        remove(road);
        add(vitamin);
        add(road);
        vitamin.start();
    }
    
    private int getPemainCurrentRoadNumber() {
        switch (pemain.getX()) {
            case 75:
                return 1;
            case 175:
                return 2;
            default:
                return 3;
        }
    }
    
    private void removeRedundantVirus() {
        if (virusList.get(0).getY() >= 430) {
            remove(virusList.get(0));
            virusList.remove(0);
            score++;
        }
    }
    
    private void removeRedundantVitamin() {
        if (vitaminList.get(0).getY() >= 500) {
            remove(vitaminList.get(0));
            vitaminList.remove(0);
        }
    }
    
    @Override
    public boolean collisionOccuredVit() {
        
        if (vitaminList.stream().anyMatch((vitaminn) -> (Math.abs(vitaminn.getX() - pemain.getX()) < 50 && Math.abs(vitaminn.getY() - pemain.getY()) < 55))) {
            System.out.println("minum vitamin "+ imun);
            return true;
        }

        return false;
    }
    
    public boolean collisionOccured() {
        
        if (virusList.stream().anyMatch((virusr) -> (Math.abs(virusr.getX() - pemain.getX()) < 50 && Math.abs(virusr.getY() - pemain.getY()) < 55))) {
            System.out.println("Nyawa kena tabrak "+ imun);
            imun -= 40;
            remove(virusList.get(0));
            virusList.remove(0);
            if(imun <= 0 ){
                imun =0;
            }
            Nyawa_pemain.setText("IMUN : "+imun + " %");
            return true;
        }
//        System.out.println("Mobil tidak nabrak");
        

        return false;
    }
    
    
    private void stopAllTimers() {
        virusSpawnTimer.stop();
        vitaminSpawnTimer.stop();
        virusSpeedIncreaseTimer.stop();
        collisionCheckTimer.stop();
        road.stopAllTimers();
        virusList.forEach((virus) -> {
            virus.stop();
        });
    }
    
    private void showAlert() {
        JOptionPane.showMessageDialog(null, "Anda Terinfeksi, Skor Anda: " + score);
        
        Koneksi.buatSkor(Awal.nama, score);
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Nyawa_pemain;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
